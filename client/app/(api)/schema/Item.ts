import { z } from "zod";

export const MetaSchema = z.object({
  side: z.string(),
  aisle_index: z.number().int(),
});

export const RequestSchema = z.object({
  vendor: z.string(),
  item_type: z.string().optional(),
  user_id: z.string(),
  debug: z.boolean(),
});

export const Vector3Schema = z.object({
  x: z.number(),
  y: z.number(),
  z: z.number(),
});

export const TimestampSchema = z.object({
  sec: z.number().int(),
  nanosec: z.number().int(),
});

export const HeaderSchema = z.object({
  stamp: TimestampSchema,
  frame_id: z.string(),
});

export const BarcodeMetaSchema = z.object({
  barcode_type: z.string(),
  data: z.string(),
  scan_id: z.string().nullable(),
  aisle_index: z.number().int(),
});

export const BarcodeAbsoluteSchema = z.object({
  position: Vector3Schema,
  dimension: Vector3Schema,
  aligned_axis: z.string(),
});

export const BarcodeRelativeSchema = z.object({
  header: HeaderSchema,
  position: Vector3Schema,
  dimension: Vector3Schema,
  side: z.string(),
});

export const BarcodeSchema = z.object({
  meta: BarcodeMetaSchema,
  absolute: BarcodeAbsoluteSchema,
  relative: BarcodeRelativeSchema,
  item_uuid: z.string(),
});

export const ItemMetaSchema = z.object({
  item_type: z.string(),
  stack: z.array(z.string()),
  location: z.string(),
  destination: z.string().nullable(),
  available: z.boolean(),
  aisle_index: z.number().int(),
  scan_id: z.string().nullable(),
});

export const ItemAbsoluteSchema = z.object({
  depth_index: z.number().int().nullable(),
  stack_index: z.number().int().nullable(),
  position: Vector3Schema,
  waypoint: z.string().nullable(),
  aligned_axis: z.string(),
});

export const ItemRelativeSchema = z.object({
  dimension: Vector3Schema,
  side: z.string(),
});

export const ItemSchema = z.object({
  barcodes: z.array(BarcodeSchema),
  meta: ItemMetaSchema,
  absolute: ItemAbsoluteSchema,
  relative: ItemRelativeSchema,
  uuid: z.string(),
});

export const ImageMetaSchema = z.object({
  x: z.number(),
  y: z.number(),
  width: z.number(),
  height: z.number(),
  container_name: z.string(),
  blob_name: z.string(),
});

export const DataEntrySchema = z.object({
  item: ItemSchema,
  x0: z.number(),
  y0: z.number(),
  x1: z.number(),
  y1: z.number(),
});

export const RenderSchema = z.object({
  id: z.string().optional(), // id will be autogenerated
  request: RequestSchema,
  meta: MetaSchema,
  data: z.array(DataEntrySchema),
  img_meta: ImageMetaSchema,
  created_at_utc: z.number(),
});
